<?php
function pum_portal_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == "pum_forum_item_node_form" || $form_id == "pum_portal_blog_node_form" || $form_id == "pum_portal_document_node_form" || $form_id == "pum_portal_news_node_form") {
    $field = 'field_pum_country';
    $value = isset($_GET["term"])? intval($_GET["term"]) : 0;

    foreach ($form as $fieldname => $field) {
      if (substr_compare($fieldname, "field_pum", 0, 9) == 0) {
        if (is_array($field['und']['#default_value']) && is_array($field['und']['#options']) && $value > 0) {
          if (array_key_exists($value, $field['und']['#options'])) {
            $form[$fieldname]['und']['#default_value'] = array($value);
          }
        }
      }

      if (substr_compare($fieldname, "field_pum_private", 0) == 0) {
        $form[$fieldname]['#disabled'] = TRUE;
        isset($form[$fieldname]['#attributes']['style'])?$form[$fieldname]['#attributes']['style'] .= "display:none;":$form[$fieldname]['#attributes']['style']="display:none";
      }
    }
  }

  if ($form_id == "user_profile_form" && $user && $user->uid == $form_state['user']->uid) {
    $redirectUrl = '/user/'.$user->uid;
    /* Add a submit handler which will set a redirect back to the profile form.
     * See also issue #3272 (http://redmine.pum.nl/issues/3272)
     */
    if (!isset($form['actions']['submit']['#submit']) || empty($form['actions']['submit']['#submit'])) {
      /* Issue #3440 user coould not change its passwords.
       * This was caused by the fact the original submit handler was not
       * invoked. So the changes on the profile pages are not submitted.
       */
      $form['actions']['submit']['#submit'][] = 'user_profile_form_submit';
    }
    $form['actions']['submit']['#submit'][] = 'pum_portal_custom_profile_submit';
    /* When on the profile form set the user context back to the profile form
     * so that when the profile picture is deleted then user is going to be redirected back
     * to the profile form.
     */
    civicrm_initialize();
    $session = CRM_Core_Session::singleton();
    $session->pushUserContext($redirectUrl);
  }

  if ($form_id == "user_profile_form") {
    foreach ($form as $fieldname => $field) {
      if (substr_compare($fieldname, "field_pum_private", 0) == 0) {
        $form[$fieldname]['#disabled'] = TRUE;
        isset($form[$fieldname]['#attributes']['style'])?$form[$fieldname]['#attributes']['style'] .= "display:none;":$form[$fieldname]['#attributes']['style']="display:none";
      }
    }
  }

  if ($form_id == "user_profile_form" || $form_id == "user_edit") {
    foreach ($form as $fieldname => $field) {

      if (substr_compare($fieldname, "field_pum", 0, 9) == 0) {
         $form[$fieldname]['#access'] = FALSE;
      }
      if (substr_compare($fieldname, "field_last_digest", 0) == 0) {
         $form[$fieldname]['#access'] = FALSE;
      }
    }
  }

  $nid_subnewsletter = db_select('node', 'n')
    ->fields('n',array('nid'))
    ->condition('title', 'Subscribe to our newsletter','=')
    ->condition('type', 'webform','=')
    ->execute()
    ->fetchField();

  if($form_id == 'webform_client_form_'.$nid_subnewsletter) {
    $form['#submit'][] = '_pum_portal_custom_subscribenewsletter_form_submit';
  }
}

/**
 * _pum_portal_custom_subscribenewsletter_form_submit()
 *
 * Function to re-add users if user was removed from mailgroup but wants to subscribe again
 * The standard webform functionality does not re-add the users if they were removed from the mailing list
 *
 * @return void
 */
function _pum_portal_custom_subscribenewsletter_form_submit(&$form, &$form_state) {
  $contactId = CRM_Core_Session::singleton()->getLoggedInContactID();

  //Get Corporate newsletter group
  try{
    $params_cnl = array(
      'version' => 3,
      'sequential' => 1,
      'title' => 'Corporate newsletter',
    );
    $params_group_newsletter = civicrm_api3('Group', 'getsingle', $params_cnl);
  } catch (CiviCRM_API3_Exception $ex) {

  }

  if(!empty($contactId)) {
    //User is logged on, use current user
    try{
      $params_add_contact_to_group = array(
        'version' => 3,
        'sequential' => 1,
        'contact_id' => $contactId,
        'group_id' => $params_group_newsletter['id'],
      );
      $result_add_contact_to_group = civicrm_api3('GroupContact', 'create', $params_add_contact_to_group);
    } catch (CiviCRM_API3_Exception $ex) {

    }
  } else {
    $isMember = FALSE;
    $contactId = FALSE;
    $result_email_contact = '';
    //User is not logged on, check if user is an existing contact, and if so use that contact, else: create a new contact
    if(!empty($form_state['input']['submitted']['personal_details']['civicrm_1_contact_1_email_email'])) {
      $params_email_contact = array(
        'version' => 3,
        'sequential' => 1,
        'email' => $form_state['input']['submitted']['personal_details']['civicrm_1_contact_1_email_email'],
        'is_primary' => 1,
      );
      $result_email_contact = civicrm_api('Email', 'get', $params_email_contact);
    }

    //I'm aware that there could be multiple contacts with the same e-mailaddress
    //It always selects the last found contact as this is the most recent contact.
    //This is because when for example a new contact is added to the organisation this normally will be the new contact person,
    //while to old contact may have left the organisation, but is still in the system.
    //This way the new contact will always get the e-mail.
    if(is_array($result_email_contact['values'])) {
      foreach($result_email_contact['values'] as $key => $value) {
        $contactId = $value['contact_id'];
        try{
          $params_contact_groups = array(
            'version' => 3,
            'sequential' => 1,
            'contact_id' => $contactId,
          );
          $result_contact_groups = civicrm_api('GroupContact', 'get', $params_contact_groups);
        } catch (CiviCRM_API3_Exception $ex) {

        }
        if(is_array($result_contact_groups)) {
          foreach($result_contact_groups['values'] as $key2 => $value2) {
            if($key2 == 'title' && $value2 == 'Corporate newsletter') {
              //User is already a member
              $isMember = TRUE;
            }
          }
        }
      }
    }

    //If user is not a member of the Corporate newsletter group add it
    if($isMember == FALSE && !empty($contactId) && !empty($params_group_newsletter['id'])) {
      //Add contact to group
      try{
        $params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $contactId,
          'group_id' => $params_group_newsletter['id'],
        );
        $result_add_contact_to_group = civicrm_api3('GroupContact', 'create', $params);
      } catch (CiviCRM_API3_Exception $ex) {

      }
    }
  }
}

/**
 * Add a redirect back to the profile view when a user has edited his or her own account.
 *
 * See also issue #3272 (http://redmine.pum.nl/issues/3272)
 *
 * @param $form
 * @param $form_state
 */
function pum_portal_custom_profile_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/'.$user->uid;
}

/**
 * Implements hook_menu().
 * Sync settings page
 */
function pum_portal_custom_menu() {
  $items['admin/config/system/pum_sync'] = array(
    'title' => 'Portal sync settings',
    'description' => 'Pum Portal Sync Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_pum_sync_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/system/pum_mail'] = array(
    'title' => 'Portal mail',
    'description' => 'Pum mail test',
    'page callback' => '_pum_portal_custom_digest',
    'page arguments' => array(1),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _pum_sync_settings_form($form, &$form_state) {
 $form['high_school']['tests_taken'] = array(
    '#type' => 'checkboxes',
    '#options' => array("countries" => "countries"),
    '#title' => t('What pum settings need to be synced '),
    '#required' => TRUE,
  );

  $form['force'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force reread.'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function _pum_sync_settings_form_submit($form, &$form_state) {
  $msg="";
  $force = $form_state["values"]["force"] == "1"? true: false;
  $msg .= print_r($form_state["values"],true);

  if ( strcmp($form_state["values"]["tests_taken"]["countries"],"countries")===0) {
    $msg .="countries: ".$form_state["values"]["tests_taken"]["countries"];
    _pum_portal_custom_sync_countries(false, $force);
  }
}

function _pum_portal_custom_sync_countries($cron = false, $force = false) {
  $ret = "";
  civicrm_initialize();

  // get all countries
  $params = Array (
      'version' => 3,
      'sequential' => 1,
      'options' => array('limit' => 1000),
  );
  $result = civicrm_api('Country', 'get', $params);

  //get country flag
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name' => 'civicrm_country_id',
  );
  $resultcustom_field = civicrm_api('CustomField', 'get', $params);

  $country_id_field="custom_".$resultcustom_field["id"];

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'contact_sub_type' => 'country',
    'options' => array('limit' => 1000),
    'return' => $country_id_field,
  );
  $resultcountrycontacts = civicrm_api('Contact', 'get', $params);

  //get country coordinators
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name_a_b' => 'Country Coordinator is',
  );
  $resultreltype = civicrm_api('RelationshipType', 'get', $params);

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'is_active' => 1,
    'relationship_type_id' => $resultreltype["values"][0]["id"],
    'options' => array('limit' => 10000),
  );
  $resultwithcoordinator = civicrm_api('Relationship', 'get', $params);

  // check with md5 hash
  $md5tot = md5(print_r($result,true).print_r($resultcountrycontacts,true).print_r($resultwithcoordinator,true));

  $md5db = variable_get("pum_md5_country", "");

  if ($md5tot == $md5db && !$force) {
    watchdog("pum", "countries the same");
    if(!$cron) {
      drupal_set_message("countries the same");
    }
  } else {
    watchdog("pum", "countries updated");
    if(!$cron) {
      drupal_set_message("countries updated");
    }

    //if different do loop per country
    $voc = taxonomy_vocabulary_machine_name_load("countries");

    if ($result["is_error"] == "0"){
      foreach($result["values"] as $country){
        $c_id = null;
        $cc_id = null;

        //get country_contact_id
        foreach ($resultcountrycontacts["values"] as $countrycontact){
          if (isset($countrycontact[$country_id_field]) && $countrycontact[$country_id_field] == $country["id"] ) { $c_id = $countrycontact["id"]; break; }
        }

        if ($c_id) {
          //if active coordinator:
          foreach ($resultwithcoordinator["values"] as $countrycoordinator){
            if ($countrycoordinator["contact_id_a"] == $c_id ) { $cc_id = $countrycoordinator["contact_id_b"]; break; }
          }
        }

        if (isset($cc_id)) {
          $terms=taxonomy_get_term_by_name($country["name"],"countries");
          if (count($terms) > 0) {
            $term = array_shift($terms);
          } else {
            $term = new stdClass();
            $term->name = $country["name"];
          }
          $term->vid = $voc->vid;
          $term->field_country_id["und"][0]["value"] = $country["id"];
          taxonomy_term_save($term);
        }
      }
    }
    variable_set("pum_md5_country", $md5tot);
  }
  if (!$cron) {
    return $ret;
  }
}

function pum_portal_custom_cron() {
  _pum_portal_custom_sync_countries(true);
  _pum_portal_custom_digest_all();
}

/**
 * Implements hook_block_info().
 */
function pum_portal_custom_block_info() {
  $blocks = array();
  $blocks['pum_term_subscription'] = array(
    'info' => t('Pum Term Subscription'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['pum_knowledge_portal'] = array(
    'info' => t('PUMnet Knowledge Portal'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['socialmedia_icons_top'] = array(
    'info' => t('PUM Social Media Icons Top'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['socialmedia_icons_bottom'] = array(
    'info' => t('PUM Social Media Icons Bottom'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pum_portal_custom_block_view($delta = '') {
  $block = array();
  $social_media_links = '<a class="fb" href="https://www.facebook.com/PUM.nl" target="_blank" title="Join us on Facebook">&nbsp;</a><a class="tw" href="https://twitter.com/pum_nl" target="_blank" title="Follow us on Twitter">&nbsp;</a><a class="li" href="https://www.linkedin.com/company/pum-netherlands-senior-experts" target="_blank" title="Join us on LinkedIn">&nbsp;</a><a class="yt" href="https://www.youtube.com/user/PUMSeniorExperts" target="_blank" title="Watch us on YouTube">&nbsp;</a><a class="in" href="https://www.instagram.com/pum_nl/" target="_blank" title="Follow us on Instagram">&nbsp;</a>';
  switch ($delta) {
    case 'pum_term_subscription':
      $block['subject'] = t('Subscribe');
      $block['content'] = _pum_portal_subscription();
      break;
    case 'pum_knowledge_portal':
      $block['content'] = '<img src="/sites/all/themes/pum/images/knowledge_portal.png" />';
      break;
    case 'socialmedia_icons_top':
      $block['content'] = '<div class="socialmedia_top">'.$social_media_links.'</div>';
      break;
    case 'socialmedia_icons_bottom':
      $block['content'] = '<div class="socialmedia_bottom">'.$social_media_links.'</div>';
      break;
  }
  return $block;
}

function _pum_portal_subscription() {
  $term = array();
  // are we on term page??
  $term[0] = menu_get_object('taxonomy_term', 2);
  if (!isset($term[0]->tid)) {
    // Try to get it without menu_get_object().
    if (arg(0) == 'taxonomy' && arg(1) == 'term' && arg(2)) {
      $term[0] = taxonomy_term_load(arg(2));
    }
  }

  if (!(isset($term[0]) && is_object($term[0]))) {
    $term = array();

    //are we on a node page with terms?
    $node = menu_get_object();
    $tids = array();

    if (is_object($node)) foreach ($node as $fieldname => $fieldvalue) {
      if (substr_compare($fieldname, "field_pum_", 0,10) == 0) {
        if (isset($fieldvalue["und"]) && is_array($fieldvalue["und"])) {
          foreach($fieldvalue["und"] as $vals) {
            if (isset($vals["taxonomy_term"])) {
              $term[]=$vals["taxonomy_term"];
            }
          }
        }
      }
    }
  }
  //if no terms are found: return empty block
  if (!(isset($term[0]) && is_object($term[0]))) {
    return;
  }

  return drupal_get_form("_pum_portal_subscription_form", $term);
}

function _pum_portal_subscription_form($form, &$form_state) {
  $term = $form_state['build_info']['args'][0];

  //user subscribed terms
  global $user;
  $account = user_load($user->uid);
  $tids = array();
  foreach ($account as $fieldname => $fieldvalue) {
    if (substr_compare($fieldname, "field_", 0,6)==0) {
      if (isset($fieldvalue["und"]) && is_array($fieldvalue["und"])) {
        foreach($fieldvalue["und"] as $vals){
          if (isset($vals["tid"])) {
            $tids[$vals["tid"]]=$vals["tid"];
          }
        }
      }
    }
  }

  if (isset($term[0]) && is_object($term[0])) {
    foreach ($term as $t) {
      $form['subscribe']['subscribe_'.$t->tid] = array(
        '#type' => 'checkbox',
        '#title' => $t->name,
        '#default_value' => isset($tids[$t->tid])?1:0,
      );
    }

    $form['actions'] = array('#type' => 'actions');
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Save'),
    );

    return $form;
  } else {
   return false;
  }
}

function _pum_portal_subscription_form_submit($form, &$form_state) {
  $msg = "";
  //get values and default values, when changed: do something
  $term = $form_state['build_info']['args'][0];

  global $user;
  $account = user_load($user->uid);
  $accountchanged = FALSE;
  $tids=array();

  foreach ($account as $fieldname => $fieldvalue) {
    if (substr_compare($fieldname, "field_", 0,6)==0) {
      if (isset($fieldvalue["und"]) && is_array($fieldvalue["und"])) {
        foreach($fieldvalue["und"] as $vals) {
          if (isset($vals["tid"])) {
            $tids[$vals["tid"]]=$vals["tid"];
          }
        }
      }
    }
  }

  $account_edit = array();
  $account_edit["field_pum_country"] = $account->field_pum_country;
  $account_edit["field_pum_sector"] = $account->field_pum_sector;
  $account_edit["field_pum_generic"] = $account->field_pum_generic;
  $account_edit["field_pum_private"] = $account->field_pum_private;

  foreach($form_state["values"] as $name => $value) {
    if (strpos($name, "subscribe_") === 0) {
      $tid = str_replace("subscribe_","", $name);
      $voc = "";
      foreach($term as $t) {
        if ($t->tid == $tid) {
          $voc = $t->vocabulary_machine_name;

          if ($voc == "countries") {
            $fieldname = "field_pum_country";
          } elseif ($voc == "pum_generic") {
            $fieldname = "field_pum_generic";
          } elseif ($voc == "sector") {
            $fieldname = "field_pum_sector";
          } else {
            continue;
          }

          if ($value == 1) { //add if not active
            $found = FALSE;
            if ($fieldname && isset($account_edit[$fieldname]["und"])) {
              foreach ($account_edit[$fieldname]["und"] as $nr => $val) {
                if ($val["tid"] == $tid) {
                  $found = TRUE;
                }
              }
              if ($found == FALSE && !isset($account_edit[$fieldname]["und"])) {
                  $account_edit[$fieldname]["und"] = array();
                  $account_edit[$fieldname]["und"][]=array("tid" => $tid);
                  $accountchanged = TRUE;
              }
            } else {
              //delete if active
              $found = FALSE;
              $foundnr = -1;
              if ($fieldname && isset($account_edit[$fieldname]["und"])) foreach ($account_edit[$fieldname]["und"] as $nr => $val){
                if ($val["tid"] == $tid) {
                  $found = TRUE;
                  $foundnr = $nr;
                }
              }
              if ($found == TRUE) {
                array_splice($account_edit[$fieldname]["und"],$foundnr,1);
                $accountchanged = TRUE;
              }
            }
          }
        }
      }
    }
  }

  if ($accountchanged == TRUE) {
    user_save($account, $account_edit);
    $msg = "Subscriptions updated";
    drupal_set_message($msg);
  }
}

/**
* Make sure nodes pum_portal nodes are only viewable by people with the right permissions
*/
function pum_portal_custom_node_grants_alter(&$grants, $account, $op){
  if ($account->uid == 0) {
    $i = 0;
    foreach ($grants as $gid => $grant) {
      if ($gid == "abt_field_pum_private") {
        array_splice($grants, $i, 1);
      }
      $i++;
    }
  }
}

function pum_portal_custom_action_info() {
  return array(
    'pum_portal_custom_add_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Add community to users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
    'pum_portal_custom_delete_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Delete community from users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
  );
}

function pum_portal_custom_delete_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) ||
       !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $foundnr = -1;
    $accountchanged = FALSE;
    if ($fieldname && isset($account_edit[$fieldname]["und"])) foreach ($account_edit[$fieldname]["und"] as $nr => $val){
      if ($val["tid"] == $term) {
        $found = TRUE;
        $foundnr = $nr;
      }
    }
    if ($found == TRUE) {
      array_splice($account_edit[$fieldname]["und"],$foundnr,1);
      $accountchanged = TRUE;
    }
    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_add_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) || !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $accountchanged = FALSE;

    if ($fieldname && isset($account_edit[$fieldname]["und"])) {
      foreach ($account_edit[$fieldname]["und"] as $nr => $val) {
        if ($val["tid"] == $term) {
          $found = TRUE;
        }
      }
    }

    if ($found == FALSE) {
      if (!isset($account_edit[$fieldname]["und"])) {
        $account_edit[$fieldname]["und"] = array();
      }
      $account_edit[$fieldname]["und"][]=array("tid" => $term);
      $accountchanged = TRUE;
    }

    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_civicrm_update_sector_community($contact_segment_id, $is_main) {
  civicrm_initialize();
  $contact_segment = civicrm_api3('ContactSegment', 'getsingle', array('id' => $contact_segment_id));
  if ($contact_segment['is_main']) {
    SegmentSectorCommunity::subscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  } else {
    SegmentSectorCommunity::unsubscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  }
}

function pum_portal_custom_civicrm_pre($op, $objectName, $objectId, &$params) {
  SegmentTaxonomy::pre($op, $objectName, $objectId, $params);
}

//*hook_civicrm_post

function pum_portal_custom_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  SegmentTaxonomy::post($op, $objectName, $objectId, $objectRef);
}

function pum_portal_custom_user_presave(&$edit, $account, $category) {
  SegmentSectorCommunity::subscribe_main_sector($account->uid, $edit);
}

function _pum_portal_custom_digest_all($force = false) {
  field_cache_clear();
  mailsystem_set(array(
    'pum_portal_custom_digest' => 'MimeMailSystem', // Just messages with $key sent by $module.
  ));

  //get all users who requested an email
  $query = new EntityFieldQuery();
  $users = $query->entityCondition('entity_type', 'user')
  ->propertyCondition('status', '1')
  ->fieldCondition('field_email_frequency', 'value', 1,  '>=')
  //->addMetaData('account', user_load(1))
  ->execute();

  foreach ($users['user'] as $uid => $user) {

    //per user
    $account = user_load($uid);

    //get last sent email
    $last_digest = 0;

    if (isset($account->field_last_digest['und']) && is_array($account->field_last_digest['und'])){
      foreach($account->field_last_digest['und'] as $vals){
        if (isset($vals['value'])) {
          $last_digest = $vals['value'];
        }
      }
    }

    $frequency = 0;

    //check with preferred digest settings
    if (isset($account->field_email_frequency['und']) && is_array($account->field_email_frequency['und'])){
      foreach($account->field_email_frequency['und'] as $vals){
        if (isset($vals['value'])) {
          $frequency = $vals['value'];
        }
      }
    }

    if ($frequency > 0) {
      $now = time();
      $next_timestamp = $last_digest + ($frequency * 24 * 60 * 60);

      if ($now > $next_timestamp || $force) {
        //get digest per user
        $digest_basetxt = _pum_portal_custom_digest($uid, $frequency);

        //send email
        if (strlen($digest_basetxt) > 0) {
          $params['account'] = $account;
          $params['frequency']= $frequency;
          $params['digestbase'] = $digest_basetxt;
          $m = drupal_mail('pum_portal_custom', 'digest', $account->mail, user_preferred_language($account), $params);
        }

        //update digest date
        $accountedit = array();
        $accountedit['field_last_digest'][LANGUAGE_NONE][0]['value'] = $now;
        user_save($account, $accountedit);

        $account = user_load($uid);


        if(empty($account->field_last_digest)) {
          $insert = db_insert('field_data_field_last_digest')
          ->fields(array(
            'entity_type' => 'user',
            'bundle' => 'user',
            'deleted' => 0,
            'entity_id' => $uid,
            'revision_id' => $uid,
            'language' => 'und',
            'delta' => 0,
            'field_last_digest_value' => $now,
          ))
          ->execute();

          $insert2 = db_insert('field_revision_field_last_digest')
          ->fields(array(
            'entity_type' => 'user',
            'bundle' => 'user',
            'deleted' => 0,
            'entity_id' => $uid,
            'revision_id' => $uid,
            'language' => 'und',
            'delta' => 0,
            'field_last_digest_value' => $now,
          ))
          ->execute();
        } else {
          //user_save only updates revision field, but it $account->field_last_digest take value from field_data_field_last_digest
          $update = db_update('field_data_field_last_digest')
            ->fields(array('field_last_digest_value' => $now,))
            ->condition('entity_type', 'user', '=')
            ->condition('entity_id', $uid, '=')
            ->execute();

          $update2 = db_update('field_revision_field_last_digest')
            ->fields(array('field_last_digest_value' => $now,))
            ->condition('entity_type', 'user', '=')
            ->condition('entity_id', $uid, '=')
            ->execute();
        }
      }
    }
  }
  //Need to clear field cache otherwise system returns the cached value
  field_cache_clear();
}

function pum_portal_custom_mail($key, &$message, $params) {
  $data['user'] = $params['account'];
  $options['language'] = $message['language'];
  user_mail_tokens($variables, $data, $options);
  switch($key) {
    case 'digest':
      $langcode = $message['language']->language;
      $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';
      $message['subject'] = 'PUMnet update';
      $message['body'][]= "To read the full update, please log in to PUMnet\n\n".$params['digestbase']."\n\n<br /><br />You receive this PUMnet update because you are involved in PUM Netherlands senior experts. In your profile settings on PUMnet, you can choose to adjust the frequency of receiving this PUMnet updates in your inbox.";
      break;
  }
}

function _pum_portal_custom_digest($uid=1,$days=5) {
  $ret = "";
  if (is_numeric($uid)){
    $user = user_load($uid);
    $sectorfield = $user->field_pum_sector;
    $countryfield = $user->field_pum_country;
    $genericfield = $user->field_pum_generic;
    $privatefield = $user->field_pum_private;

    $usertags = array();

    if (isset($sectorfield["und"]) && is_array($sectorfield["und"])){
      foreach($sectorfield["und"] as $vals) {
        if (isset($vals["tid"])) $usertags[]=$vals["tid"];
      }
    }
    if (isset($countryfield["und"]) && is_array($countryfield["und"])){
      foreach($countryfield["und"] as $vals) {
        if (isset($vals["tid"])) $usertags[]=$vals["tid"];
      }
    }
    if (isset($genericfield["und"]) && is_array($genericfield["und"])){
      foreach($genericfield["und"] as $vals) {
        if (isset($vals["tid"])) $usertags[]=$vals["tid"];
      }
    }
    if (isset($privatefield["und"]) && is_array($privatefield["und"])){
      foreach($privatefield["und"] as $vals) {
        if (isset($vals["tid"])) $usertags[]=$vals["tid"];
      }
    }

    if (count($usertags) > 0) {
      $entities =  _pum_portal_custom_get_recent_nodes('pum_forum_item', $days, $usertags);
      $flagentities = _pum_portal_custom_get_recent_flag_nodes('pum_forum_item', $uid, $days, 'subscribe_to_this_forum_topic');

      if (isset($flagentities)) {
        $entities = $entities + $flagentities;
      }

      if (count($entities) > 0) {
        $img = url('/sites/all/themes/pum/images/icon-portal-forum-50x50.png', array('absolute' => TRUE));
        $ret .= '<h2><img src="'.$img.'" /> Forum</h2>';
        $ret .= '<div style="width: 50%;">';
        $ret .= '<table>';
        foreach ($entities as $nid => $entity) {
          $node = node_load($nid);
          $node_view = node_view($node,'summary');
          $summary = $node_view['body'][0]['#markup'];

          $usr = user_load($node->uid);
          $changed = date("d-m-Y", $node->changed);

          $ret .= '<tr>';
          $ret .= '<td><a href="'.url("user/login?destination=node/".$node->nid, array('absolute' => TRUE)).'">'.$node->title.'</a></td>';
          $ret .= '<td>'.$usr->name.'</td>';
          $ret .= '<td>'.$changed.'</td>';
          $ret .= '</tr>';
        }
        $ret .= '</table>';
        $ret .= '</div>';
      }

      $entities =  _pum_portal_custom_get_recent_nodes('pum_portal_blog', $days, $usertags);
      $flagentities = _pum_portal_custom_get_recent_flag_nodes('pum_portal_blog', $uid, $days, 'subscribe_to_this_blog_page');
      $flagentities2 =  _pum_portal_custom_get_recent_flag_user_nodes('pum_portal_blog', $uid, $days, 'subscribe_to_this_user_blog');

      if (isset($flagentities)) {
        $entities = $entities + $flagentities;
      }
      if (isset($flagentities2)) {
        $entities = $entities + $flagentities2;
      }

      if (count($entities) > 0) {
        $img = url('/sites/all/themes/pum/images/icon-portal-blog-50x50.png', array('absolute' => TRUE));

        $ret .= '<h2><img src="'.$img.'" /> Blogs</h2>';
        $ret .= '<div style="width: 50%;">';
        $ret .= '<table>';
        foreach ($entities as $nid => $entity) {
          $node = node_load($nid);
          $node_view = node_view($node,'summary');
          $summary = $node_view['body'][0]['#markup'];

          $usr = user_load($node->uid);
          $changed = date("d-m-Y", $node->changed);

          $ret .= '<tr>';
          $ret .= '<td><a href="'.url("user/login?destination=node/".$node->nid, array('absolute' => TRUE)).'">'.$node->title.'</a></td>';
          $ret .= '<td>'.$usr->name.'</td>';
          $ret .= '<td>'.$changed.'</td>';
          $ret .= '</tr>';
        }
        $ret .= '</table>';
        $ret .= '</div>';
      }

      $entities =  _pum_portal_custom_get_recent_nodes('pum_portal_document', $days, $usertags);

      if (count($entities) > 0) {
        $img = url('/sites/all/themes/pum/images/icon-portal-library-50x50.png', array('absolute' => TRUE));

        $ret .= '<h2><img src="'.$img.'" /> Library</h2>';
        $ret .= '<div style="width: 50%;">';
        $ret .= '<table>';
        foreach ($entities as $nid => $entity) {
          $node = node_load($nid);
          $node_view = node_view($node,'summary');
          $summary = $node_view['body'][0]['#markup'];

          $usr = user_load($node->uid);
          $changed = date("d-m-Y", $node->changed);

          $ret .= '<tr>';
          $ret .= '<td style="width: 50%;"><a href="'.url("user/login?destination=node/".$node->nid, array('absolute' => TRUE)).'">'.$node->title.'</a></td>';
          $ret .= '<td>'.$usr->name.'</td>';
          $ret .= '<td>'.$changed.'</td>';
          $ret .= '</tr>';
        }
        $ret .= '</table>';
        $ret .= '</div>';
      }

      $entities = _pum_portal_custom_get_recent_nodes('pum_portal_news', $days, $usertags);

      if (count($entities) > 0) {
        $img = url('/sites/all/themes/pum/images/icon-portal-news-50x50.png', array('absolute' => TRUE));

        $ret .= '<h2><img src="'.$img.'" /> PUM News</h2>';
        $ret .= '<div style="width: 50%;">';
        $ret .= '<table>';
        foreach ($entities as $nid => $entity) {
          $node = node_load($nid);
          $node_view = node_view($node,'summary');
          $summary = $node_view['body'][0]['#markup'];

          $usr = user_load($node->uid);
          $changed = date("d-m-Y", $node->changed);

          $ret .= '<tr>';
          $ret .= '<td style="width: 50%;"><a href="'.url("user/login?destination=node/".$node->nid, array('absolute' => TRUE)).'">'.$node->title.'</a></td>';
          $ret .= '<td>'.$usr->name.'</td>';
          $ret .= '<td>'.$changed.'</td>';
          $ret .= '</tr>';
        }
        $ret .= '</table>';
        $ret .= '</div>';
      }

      $entities = _pum_portal_custom_get_recent_users(array("Customer (contact)"), $days);

      if (count($entities) > 0) {
        $img = url('/sites/all/themes/pum/images/icon-portal-directory-50x50.png', array('absolute' => TRUE));

        $ret .= '<h2><img src="'.$img.'" /> PUM Community</h2>';
        $ret .= '<div style="width: 50%;">';
        $ret .= '<table>';

        foreach ($entities as $uid => $entity) {
          $contact_img = "";
          if (!empty($entity->civicrm_contact_image_url)) {
            $contact_img = $entity->civicrm_contact_image_url;
          }
          $ret .= '<tr>';
          $ret .= '<td>'.$contact_img.'</td>';
          $ret .= '<td>'.$entity->civicrm_contact_display_name.'</td>';
          $ret .= '<td><a href="'.url("user/login?destination=user/".$uid, array('absolute' => TRUE)).'">View</a></td>';
          $ret .= '</tr>';
        }
        $ret .= '</table>';
        $ret .= '</div>';
      }
    }
  }

  return $ret;
}

function _pum_portal_custom_get_recent_flag_nodes($type, $uid, $days, $flagname) {
  $days_ago = mktime(0, 0, 0, date("m") , date("d") - $days, date("Y"));

  $q = "SELECT node.nid AS nid FROM
  {node} node
  LEFT JOIN {node_comment_statistics} node_comment_statistics ON node.nid = node_comment_statistics.nid
  INNER JOIN {flagging} flagging_node ON node.nid = flagging_node.entity_id
  INNER JOIN {flag} flag ON flagging_node.fid = flag.fid and flag.name = :flagname
  WHERE flagging_node.uid = :uid AND node.status = '1' AND node.type IN  (:type) AND (GREATEST(node.changed, node_comment_statistics.last_comment_timestamp) >= :created)
  ORDER BY node.created DESC";

  $result = db_query($q, array(':uid' => $uid, ':type' => $type, ':flagname' => $flagname, ':created' => $days_ago));

  $entities = array();

  foreach ($result as $record) {
    $entities[$record->nid] = $record->nid;
  }

  return $entities;
}
function _pum_portal_custom_get_recent_users($roles, $days) {
  $days_ago = mktime(0, 0, 0, date("m") , date("d") - $days, date("Y"));

  $q = "SELECT users.uid AS uid, civicrm_contact.display_name as civicrm_contact_display_name, civicrm_contact.image_URL AS civicrm_contact_image_url, field_data_field_pum_user_sector.field_pum_user_sector_tid AS field_pum_user_sector_tid
  FROM {users} users
  LEFT JOIN {users_roles} users_roles ON users.uid = users_roles.uid
  LEFT JOIN {role} role on role.rid = users_roles.rid
  LEFT JOIN {civicrm_uf_match} civicrm_uf_match ON users.uid = civicrm_uf_match.uf_id
  LEFT JOIN {civicrm_contact} civicrm_contact ON civicrm_uf_match.contact_id = civicrm_contact.id
  LEFT JOIN {field_data_field_pum_user_sector} field_data_field_pum_user_sector ON users.uid = field_data_field_pum_user_sector.entity_id AND field_data_field_pum_user_sector.entity_type = 'user'
  WHERE (( (users.status <> '0') AND (role.name NOT IN (:roles)) AND (users.created >= :created) ))";

  $result = db_query($q, array(':roles' => $roles, ':created' => $days_ago));

  $entities = array();

  foreach ($result as $record) {
    $entities[$record->uid] = $record;
  }

  return $entities;
}


function _pum_portal_custom_get_recent_flag_user_nodes($type, $uid, $days, $flagname) {
  $days_ago = mktime(0, 0, 0, date("m") , date("d") - $days, date("Y"));

  $q = "SELECT node.nid AS nid FROM
  {node} node
  LEFT JOIN {users} users_node ON node.uid = users_node.uid
  LEFT JOIN {node_comment_statistics} node_comment_statistics ON node.nid = node_comment_statistics.nid
  INNER JOIN {flagging} flagging_node ON users_node.uid = flagging_node.entity_id
  INNER JOIN {flag} flag ON flagging_node.fid = flag.fid and flag.name = :flagname
  WHERE flagging_node.uid = :uid AND node.status = '1' AND node.type IN  (:type) AND (GREATEST(node.changed, node_comment_statistics.last_comment_timestamp) >= :created)
  ORDER BY node.created DESC";

  $result = db_query($q, array(':uid' => $uid, ':type' => $type, ':flagname' => $flagname, ':created' => $days_ago));

  $entities = array();

  foreach ($result as $record) {
    $entities[$record->nid] = $record->nid;
  }

  return $entities;
}

function _pum_portal_custom_get_recent_nodes($type,$days, $usertags) {
  $timestamp_days_ago = mktime(0, 0, 0, date("m") , date("d") - $days, date("Y"));
  $days_ago = date('Y-m-d', $timestamp_days_ago);
  $query = new EntityFieldQuery();
  $entities1 = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('status', '1')
    ->propertyCondition('changed', $days_ago, '>=')
    ->fieldCondition('field_pum_country', 'tid', $usertags, 'IN')
    ->execute();

  $query = new EntityFieldQuery();
  $entities2 = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('status', '1')
    ->propertyCondition('changed', $days_ago, '>=')
    ->fieldCondition('field_pum_sector', 'tid', $usertags, 'IN')
    ->execute();

  $query = new EntityFieldQuery();
  $entities3 = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('status', '1')
    ->propertyCondition('changed', $days_ago, '>=')
    ->fieldCondition('field_pum_generic', 'tid', $usertags, 'IN')
    ->execute();

  $query = new EntityFieldQuery();
  $entities4 = $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', $type)
    ->propertyCondition('status', '1')
    ->propertyCondition('changed', $days_ago, '>=')
    ->fieldCondition('field_pum_private', 'tid', $usertags, 'IN')
    ->execute();

  $entities = array();
  if (isset($entities1["node"])) {
    $entities[] = $entities1["node"];
  }
  if (isset($entities2["node"])) {
    $entities[] = $entities2["node"];
  }
  if (isset($entities3["node"])) {
    $entities[] = $entities3["node"];
  }
  if (isset($entities4["node"])) {
    $entities[] = $entities4["node"];
  }

  return $entities;
}

function pum_portal_custom_views_query_alter(&$view, &$query) {
  global $user;

  $viewNamesToRestrict = array('latest_portal_blogs', 'pum_portal_latest_forum_topics', 'latest_portal_documents', 'latest_portal_news', 'policies');

  if (!empty($user->uid) && in_array($view->name, $viewNamesToRestrict)) {
    /**
     * Add a where statement to include only forum topics which are not linked
     * to a private a community or which are linked to a private community from
     * which a user has access to.
     */
    $account = user_load($user->uid);
    $user_private_communities = array();
    if (!empty($account->field_pum_private['und'])) {
      foreach ($account->field_pum_private['und'] as $userterm) {
        $user_private_communities[] = $userterm['tid'];
      }
    }

    $vocabulary = taxonomy_vocabulary_machine_name_load('private_group');
    $private_communities = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $access_communities = array();

    foreach($private_communities as $term) {
      if (in_array($term->tid, $user_private_communities)) {
        if(taxonomy_term_load($term->tid) != FALSE) {
          $access_communities[] = $term->tid;
        }
      }
    }

    $join = new views_join;
    $join->construct('field_data_field_pum_private',
      'node',  // left table
      'nid',   // left field
      'entity_id',   // field,
      array(array(
        'field' => 'entity_type',
        'value' =>'node',
      ),array(
        'field' => 'deleted',
        'value' =>'0',
      )),
      'LEFT'
    );

    $max_key = max( array_keys($query->where));
    $view->query->add_relationship('field_data_field_pum_private',$join,'node');

    $conditions = db_or();
    if(!empty($access_communities)) {
      $conditions->condition('field_data_field_pum_private.field_pum_private_tid', $access_communities, 'IN');
    }
    $conditions->condition('field_data_field_pum_private.field_pum_private_tid', '', 'IS NULL');

    $query->add_where($max_key, $conditions);
  }
}

function pum_portal_custom_node_access($node, $op, $account) {
  if (is_string($node)) {
    return NODE_ACCESS_IGNORE;
  }
  if ($op != 'view') {
    return NODE_ACCESS_IGNORE;
  }

  $nodeType = $node->type;
  $restrictedNodeTypes = array('pum_forum_item', 'pum_portal_document', 'pum_portal_blog', 'pum_portal_news');

  if (in_array($nodeType, $restrictedNodeTypes) && is_array($user->field_pum_private['und']) && is_array($node->field_pum_private['und']) && count($node->field_pum_private['und'])) {
    $user = user_load($account->uid);
    // Check whether the user has access to the private community.
    foreach($node->field_pum_private['und'] as $term) {
      foreach($user->field_pum_private['und'] as $userterm) {
        if ($term['tid'] == $userterm['tid']) {
          return NODE_ACCESS_ALLOW;
        }
      }
    }
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}

function _pum_portal_custom_get_user_subscribed_topics() {
  $flag_nodes = flag_get_user_flags('node');
  $flag_users = flag_get_user_flags('user');

  $topics = array();

  if(is_array($flag_nodes)) {
    foreach($flag_nodes as $key => $entity_id) {
      if($key == 'subscribe_to_this_blog_page') {
        foreach($entity_id as $key2 => $value) {
          $topics['blog'][$value->entity_id] = node_load($value->entity_id);
        }
      }
      if($key == 'subscribe_to_this_forum_topic') {
        foreach($entity_id as $key3 => $value) {
          $topics['forum'][$value->entity_id] = node_load($value->entity_id);
        }
      }
    }
  }
  if(is_array($flag_users)) {
    foreach($flag_users as $key => $entity_id) {
      foreach($entity_id as $key2 => $value) {
        $topics['user_blogs'][$value->entity_id] = user_load($value->entity_id);
      }
    }
  }

  return $topics;
}


function pum_portal_custom_user_view($account, $view_mode) {
  $topics = '';
  $blogs = '';
  $fora = '';
  $user_blogs = '';
  $markup = '';
  $email_preferences = '';
  $last_email_notification = '';

  //Last digest count should not be displayed on user profile page it is converted below to readable date format
  $account->content['field_last_digest']['#access'] = FALSE;
  $account->content['field_email_preferences']['#access'] = FALSE;
  $last_email_notification_ts = field_get_items('user', $account, 'field_last_digest')[0]['value'];

  if(!empty($last_email_notification_ts)) {
    $last_email_notification = '<dd>'.date('d-m-Y H:i:s',$last_email_notification_ts).'</dd>';
  }

  //Get subscribed topics & e-mail preferences of user
  $topics = _pum_portal_custom_get_user_subscribed_topics();
  $account = user_load($account->uid);
  $email_pref_getfield = field_get_items('user', $account, 'field_email_preferences');
  $email_pref_getvalues = array();
  if(is_array($email_pref_getfield)) {
    foreach ($email_pref_getfield as $key => $value) {
      $email_pref_getvalues[] = field_view_value('user', $account, 'field_email_preferences', $email_pref_getfield[$key]);
    }
  }
  //Loop through all e-mail preferences and subscribed topics and put a little markup to it
  //This will be shown on the user profile page
  if(is_array($email_pref_getvalues)) {
    foreach($email_pref_getvalues as $key => $value) {
      $email_preferences.= '<dd>'.$value['#markup'].'</dd>';
    }
  }

  if (is_array($topics)) {
    foreach($topics as $key => $topic) {
      if ($key == 'forum') {
        foreach($topic as $key2 => $title){
          $fora.= '<dd><a href="/node/'.$key2.'">'.$title->title.'</a></dd>';
        }
      }

      if ($key == 'blog') {
        foreach($topic as $key2 => $title){
          $blogs.= '<dd><a href="/node/'.$key2.'">'.$title->title.'</a></dd>';
        }
      }

      if ($key == 'user_blogs') {
        foreach($topic as $key2 => $title){
          $user_blogs.= '<dd><a href="/node/'.$key2.'">'.$title->mail.'</a></dd>';
        }
      }
    }
  }

  $markup.= '<br />';
  $markup.= '<h3>E-mail Preferences</h3>';
  $markup.= '<h5>Last e-mail notification</h5>';
  $markup.= $last_email_notification;
  $markup.= '<br />';
  $markup.= '<h5>Preferred e-mails</h5>';
  $markup.= $email_preferences;
  $markup.= '<br />';
  $markup.= '<h5>Subscribed Fora</h5>';
  $markup.= $fora;
  $markup.= '<br />';
  $markup.= '<h5>Subscribed Blogs</h5>';
  $markup.= $blogs;
  $markup.= '<br />';
  $markup.= '<h5>Subscribed User Blogs</h5>';
  $markup.= $user_blogs;
  $markup.= '<br />';

  $account->content['subscribed_topics'] = array(
    '#markup' => t($markup),
    '#weight' => 10,
  );
}