<?php
function pum_portal_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == "pum_forum_item_node_form" || $form_id == "pum_portal_blog_node_form" || $form_id == "pum_portal_document_node_form" || $form_id == "pum_portal_news_node_form") {
    $field = 'field_pum_country';
    $value = isset($_GET["term"])? intval($_GET["term"]) : 0;

    foreach ($form as $fieldname => $field) {
      if (substr_compare($fieldname, "field_pum", 0, 9) == 0) {
        if (is_array($field['und']['#default_value']) && is_array($field['und']['#options']) && $value > 0) {
          if (array_key_exists($value, $field['und']['#options'])) {
            $form[$fieldname]['und']['#default_value'] = array($value);
          }
        }
      }

      if (substr_compare($fieldname, "field_pum_private", 0) == 0) {
        $form[$fieldname]['#disabled'] = TRUE;
        isset($form[$fieldname]['#attributes']['style'])?$form[$fieldname]['#attributes']['style'] .= "display:none;":$form[$fieldname]['#attributes']['style']="display:none";
      }
    }
  }

  if ($form_id == "user_profile_form" && $user && $user->uid == $form_state['user']->uid) {
    $redirectUrl = '/user/'.$user->uid;
    /* Add a submit handler which will set a redirect back to the profile form.
     * See also issue #3272 (http://redmine.pum.nl/issues/3272)
     */
    if (!isset($form['actions']['submit']['#submit']) || empty($form['actions']['submit']['#submit'])) {
      /* Issue #3440 user coould not change its passwords.
       * This was caused by the fact the original submit handler was not
       * invoked. So the changes on the profile pages are not submitted.
       */
      $form['actions']['submit']['#submit'][] = 'user_profile_form_submit';
    }
    $form['actions']['submit']['#submit'][] = 'pum_portal_custom_profile_submit';
    /* When on the profile form set the user context back to the profile form
     * so that when the profile picture is deleted then user is going to be redirected back
     * to the profile form.
     */
    civicrm_initialize();
    $session = CRM_Core_Session::singleton();
    $session->pushUserContext($redirectUrl);
  }

  if ($form_id == "merci_reservation_node_form") {
	  $form['actions']['submit']['#value'] = t('Submit');
  }
}

/**
 * Add a redirect back to the profile view when a user has edited his or her own account.
 *
 * See also issue #3272 (http://redmine.pum.nl/issues/3272)
 *
 * @param $form
 * @param $form_state
 */
function pum_portal_custom_profile_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/'.$user->uid;
}

/**
 * Implements hook_menu().
 * Sync settings page
 */
function pum_portal_custom_menu() {
  $items['admin/config/system/pum_sync'] = array(
    'title' => 'Portal sync settings',
    'description' => 'Pum Portal Sync Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_pum_sync_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _pum_sync_settings_form($form, &$form_state) {
 $form['high_school']['tests_taken'] = array(
    '#type' => 'checkboxes',
    '#options' => array("countries" => "countries"),
    '#title' => t('What pum settings need to be synced '),
    '#required' => TRUE,
  );

  $form['force'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force reread.'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function _pum_sync_settings_form_submit($form, &$form_state) {
  $msg="";
  $force = $form_state["values"]["force"] == "1"? true: false;
  $msg .= print_r($form_state["values"],true);

  if ( strcmp($form_state["values"]["tests_taken"]["countries"],"countries")===0) {
    $msg .="countries: ".$form_state["values"]["tests_taken"]["countries"];
    _pum_portal_custom_sync_countries(false, $force);
  }
}

function _pum_portal_custom_sync_countries($cron = false, $force = false) {
  $ret = "";
  civicrm_initialize();

  // get all countries
  $params = Array (
      'version' => 3,
      'sequential' => 1,
      'options' => array('limit' => 1000),
  );
  $result = civicrm_api('Country', 'get', $params);

  //get country flag
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name' => 'civicrm_country_id',
  );
  $resultcustom_field = civicrm_api('CustomField', 'get', $params);

  $country_id_field="custom_".$resultcustom_field["id"];

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'contact_sub_type' => 'country',
    'options' => array('limit' => 1000),
    'return' => $country_id_field,
  );
  $resultcountrycontacts = civicrm_api('Contact', 'get', $params);

  //get country coordinators
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name_a_b' => 'Country Coordinator is',
  );
  $resultreltype = civicrm_api('RelationshipType', 'get', $params);

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'is_active' => 1,
    'relationship_type_id' => $resultreltype["values"][0]["id"],
    'options' => array('limit' => 10000),
  );
  $resultwithcoordinator = civicrm_api('Relationship', 'get', $params);

  // check with md5 hash
  $md5tot = md5(print_r($result,true).print_r($resultcountrycontacts,true).print_r($resultwithcoordinator,true));

  $md5db = variable_get("pum_md5_country", "");

  if ($md5tot == $md5db && !$force) {
    watchdog("pum", "countries the same");
    if(!$cron) {
      drupal_set_message("countries the same");
    }
  } else {
    watchdog("pum", "countries updated");
    if(!$cron) {
      drupal_set_message("countries updated");
    }

    //if different do loop per country
    $voc = taxonomy_vocabulary_machine_name_load("countries");

    if ($result["is_error"] == "0"){
      foreach($result["values"] as $country){
        $c_id = null;
        $cc_id = null;

        //get country_contact_id
        foreach ($resultcountrycontacts["values"] as $countrycontact){
          if (isset($countrycontact[$country_id_field]) && $countrycontact[$country_id_field] == $country["id"] ) { $c_id = $countrycontact["id"]; break; }
        }

        if ($c_id) {
          //if active coordinator:
          foreach ($resultwithcoordinator["values"] as $countrycoordinator){
            if ($countrycoordinator["contact_id_a"] == $c_id ) { $cc_id = $countrycoordinator["contact_id_b"]; break; }
          }
        }

        if (isset($cc_id)) {
          $terms=taxonomy_get_term_by_name($country["name"],"countries");
          if (count($terms) > 0) {
            $term = array_shift($terms);
          } else {
            $term = new stdClass();
            $term->name = $country["name"];
          }
          $term->vid = $voc->vid;
          $term->field_country_id["und"][0]["value"] = $country["id"];
          taxonomy_term_save($term);
        }
      }
    }
    variable_set("pum_md5_country", $md5tot);
  }
  if (!$cron) {
    return $ret;
  }
}

function pum_portal_custom_cron() {
  _pum_portal_custom_sync_countries(true);
}

/**
 * Implements hook_block_info().
 */
function pum_portal_custom_block_info() {
  $blocks = array();

  $blocks['pum_knowledge_portal'] = array(
    'info' => t('PUMnet Knowledge Portal'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['socialmedia_icons'] = array(
    'info' => t('PUM Social Media Icons'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pum_portal_custom_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'pum_knowledge_portal':
      $block['content'] = '<img src="/sites/all/themes/pum/images/knowledge_portal.png" />';
      break;
    case 'socialmedia_icons':
      $block['content'] = '<div class="socialmedia"><a class="fb" href="https://www.facebook.com/PUM.nl">&nbsp;</a><a class="tw" href="https://twitter.com/pum_nl">&nbsp;</a><a class="li" href="https://www.linkedin.com/company/pum-netherlands-senior-experts">&nbsp;</a><a class="yt" href="https://www.youtube.com/user/PUMSeniorExperts">&nbsp;</a><a class="in" href="https://www.instagram.com/pum_nl/">&nbsp;</a></div>';
      break;
  }
  return $block;
}

/**
* Make sure nodes pum_portal nodes are only viewable by people with the right permissions
*/
function pum_portal_custom_node_grants_alter(&$grants, $account, $op){
  if ($account->uid == 0) {
    $i = 0;
    foreach ($grants as $gid => $grant) {
      if ($gid == "abt_field_pum_private") {
        array_splice($grants, $i, 1);
      }
      $i++;
    }
  }
}

function pum_portal_custom_action_info() {
  return array(
    'pum_portal_custom_add_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Add community to users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
    'pum_portal_custom_delete_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Delete community from users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
  );
}

function pum_portal_custom_delete_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) ||
       !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $foundnr = -1;
    $accountchanged = FALSE;
    if ($fieldname && isset($account_edit[$fieldname]["und"])) foreach ($account_edit[$fieldname]["und"] as $nr => $val){
      if ($val["tid"] == $term) {
        $found = TRUE;
        $foundnr = $nr;
      }
    }
    if ($found == TRUE) {
      array_splice($account_edit[$fieldname]["und"],$foundnr,1);
      $accountchanged = TRUE;
    }
    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_add_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) || !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $accountchanged = FALSE;

    if ($fieldname && isset($account_edit[$fieldname]["und"])) {
      foreach ($account_edit[$fieldname]["und"] as $nr => $val) {
        if ($val["tid"] == $term) {
          $found = TRUE;
        }
      }
    }

    if ($found == FALSE) {
      if (!isset($account_edit[$fieldname]["und"])) {
        $account_edit[$fieldname]["und"] = array();
      }
      $account_edit[$fieldname]["und"][]=array("tid" => $term);
      $accountchanged = TRUE;
    }

    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_civicrm_update_sector_community($contact_segment_id, $is_main) {
  civicrm_initialize();
  $contact_segment = civicrm_api3('ContactSegment', 'getsingle', array('id' => $contact_segment_id));
  if ($contact_segment['is_main']) {
    SegmentSectorCommunity::subscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  } else {
    SegmentSectorCommunity::unsubscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  }
}

function pum_portal_custom_civicrm_pre($op, $objectName, $objectId, &$params) {
  SegmentTaxonomy::pre($op, $objectName, $objectId, $params);
}

//*hook_civicrm_post

function pum_portal_custom_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  SegmentTaxonomy::post($op, $objectName, $objectId, $objectRef);
}

function pum_portal_custom_user_presave(&$edit, $account, $category) {
  SegmentSectorCommunity::subscribe_main_sector($account->uid, $edit);
}

function pum_portal_custom_views_query_alter(&$view, &$query) {
  global $user;

  $viewNamesToRestrict = array('latest_portal_blogs', 'pum_portal_latest_forum_topics', 'latest_portal_documents', 'latest_portal_news');

  if (!empty($user->uid) && in_array($view->name, $viewNamesToRestrict)) {
    /**
     * Add a where statement to include only forum topics which are not linked
     * to a private a community or which are linked to a private community from
     * which a user has access to.
     */
    $account = user_load($user->uid);
    $user_private_communities = array();
    if (!empty($account->field_pum_private['und'])) {
      foreach ($account->field_pum_private['und'] as $userterm) {
        $user_private_communities[] = $userterm['tid'];
      }
    }

    $vocabulary = taxonomy_vocabulary_machine_name_load('private_group');
    $private_communities = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $access_communities = array();

    foreach($private_communities as $term) {
      if (in_array($term->tid, $user_private_communities)) {
        if(taxonomy_term_load($term->tid) != FALSE) {
          $access_communities[] = $term->tid;
        }
      }
    }

    $join = new views_join;
    $join->construct('field_data_field_pum_private',
      'node',  // left table
      'nid',   // left field
      'entity_id',   // field,
      array(array(
        'field' => 'entity_type',
        'value' =>'node',
      ),array(
        'field' => 'deleted',
        'value' =>'0',
      )),
      'LEFT'
    );

    $max_key = max( array_keys($query->where));
    $view->query->add_relationship('field_data_field_pum_private',$join,'node');

    $conditions = db_or();
    if(!empty($access_communities)) {
      $conditions->condition('field_data_field_pum_private.field_pum_private_tid', $access_communities, 'IN');
    }
    $conditions->condition('field_data_field_pum_private.field_pum_private_tid', '', 'IS NULL');

    $query->add_where($max_key, $conditions);
  }
}

function pum_portal_custom_node_access($node, $op, $account) {
  if (is_string($node)) {
    return NODE_ACCESS_IGNORE;
  }
  if ($op != 'view') {
    return NODE_ACCESS_IGNORE;
  }

  $nodeType = $node->type;
  $restrictedNodeTypes = array('pum_forum_item', 'pum_portal_document', 'pum_portal_blog', 'pum_portal_news');

  if (!isset($node->field_pum_private['und'])) {
    $node->field_pum_private['und'] = array();
  }

  $user = user_load($account->uid);
  if (in_array($nodeType, $restrictedNodeTypes) && is_array($user->field_pum_private['und']) && is_array($node->field_pum_private['und']) && count($node->field_pum_private['und'])) {
    // Check whether the user has access to the private community.
    foreach($node->field_pum_private['und'] as $term) {
      foreach($user->field_pum_private['und'] as $userterm) {
        if ($term['tid'] == $userterm['tid']) {
          return NODE_ACCESS_ALLOW;
        }
      }
    }
    return NODE_ACCESS_DENY;
  }
  return NODE_ACCESS_IGNORE;
}