<?php
function pum_portal_custom_user_logout($account) {
  global $user;

  $logout_langcode = $GLOBALS['language']->language;
  $current_path = current_path();

  if(empty($_SESSION['masquerading']) &&
      substr($current_path, 0,10) != 'masquerade' &&
      substr($current_path, 0,10) != 'user/login' &&
      substr($current_path, 0,6) != 'portal' &&
      substr($current_path, 0,10) != 'user/reset' &&
      substr($current_path, 0,15) != 'password/change'){
    //Destroy the current session, and reset $user to the anonymous user.
    session_destroy();
    // Force anonymous user.
    $user = drupal_anonymous_user();

    if(variable_get('pum_portal_custom_environment_active') == TRUE) {
      drupal_goto(variable_get('pum_portal_custom_environment').$logout_langcode);
    } else {
      drupal_goto($base_url);
    }
  }
}

function pum_portal_custom_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if ($form_id == "pum_forum_item_node_form" || $form_id == "pum_portal_blog_node_form" || $form_id == "pum_portal_document_node_form" || $form_id == "pum_portal_news_node_form") {
    $field = 'field_pum_country';
    $value = isset($_GET["term"])? intval($_GET["term"]) : 0;

    foreach ($form as $fieldname => $field) {
      if (substr_compare($fieldname, "field_pum", 0, 9) == 0) {
        if (is_array($field['und']['#default_value']) && is_array($field['und']['#options']) && $value > 0) {
          if (array_key_exists($value, $field['und']['#options'])) {
            $form[$fieldname]['und']['#default_value'] = array($value);
          }
        }
      }

      if (substr_compare($fieldname, "field_pum_private", 0) == 0) {
        $form[$fieldname]['#disabled'] = TRUE;
        isset($form[$fieldname]['#attributes']['style'])?$form[$fieldname]['#attributes']['style'] .= "display:none;":$form[$fieldname]['#attributes']['style']="display:none";
      }
    }
  }

  if ($form_id == "user_profile_form" && $user && $user->uid == $form_state['user']->uid) {
    $redirectUrl = '/user/'.$user->uid;
    /* Add a submit handler which will set a redirect back to the profile form.
     * See also issue #3272 (http://redmine.pum.nl/issues/3272)
     */
    if (!isset($form['actions']['submit']['#submit']) || empty($form['actions']['submit']['#submit'])) {
      /* Issue #3440 user coould not change its passwords.
       * This was caused by the fact the original submit handler was not
       * invoked. So the changes on the profile pages are not submitted.
       */
      $form['actions']['submit']['#submit'][] = 'user_profile_form_submit';
    }
    $form['actions']['submit']['#submit'][] = 'pum_portal_custom_profile_submit';
    /* When on the profile form set the user context back to the profile form
     * so that when the profile picture is deleted then user is going to be redirected back
     * to the profile form.
     */
    civicrm_initialize();
    $session = CRM_Core_Session::singleton();
    $session->pushUserContext($redirectUrl);
  }

  $nid_subnewsletter = db_select('node', 'n')
    ->fields('n',array('nid'))
      ->condition('title', 'Subscribe to our newsletter','=')
      ->condition('type', 'webform','=')
      ->execute()
      ->fetchField();
  if($form_id == 'webform_client_form_'.$nid_subnewsletter) {
    $form['#submit'][] = '_pum_portal_custom_subscribenewsletter_form_submit';
  }
}

/**
 * _pum_portal_custom_subscribenewsletter_form_submit()
 *
 * Function to re-add users if user was removed from mailgroup but wants to subscribe again
 * The standard webform functionality does not re-add the users if they were removed from the mailing list
 *
 * @return void
 */
function _pum_portal_custom_subscribenewsletter_form_submit(&$form, &$form_state) {
  $contactId = CRM_Core_Session::singleton()->getLoggedInContactID();
  //Get Corporate newsletter group
  try{
    $params_cnl = array(
      'version' => 3,
      'sequential' => 1,
      'title' => 'Corporate newsletter',
    );
    $params_group_newsletter = civicrm_api3('Group', 'getsingle', $params_cnl);
  } catch (CiviCRM_API3_Exception $ex) {
  }
  if(!empty($contactId)) {
    //User is logged on, use current user
    try{
      $params_add_contact_to_group = array(
        'version' => 3,
        'sequential' => 1,
        'contact_id' => $contactId,
        'group_id' => $params_group_newsletter['id'],
      );
      $result_add_contact_to_group = civicrm_api3('GroupContact', 'create', $params_add_contact_to_group);
    } catch (CiviCRM_API3_Exception $ex) {
    }
  } else {
    $isMember = FALSE;
    $contactId = FALSE;
    $result_email_contact = '';
    //User is not logged on, check if user is an existing contact, and if so use that contact, else: create a new contact
    if(!empty($form_state['input']['submitted']['personal_details']['civicrm_1_contact_1_email_email'])) {
      $params_email_contact = array(
        'version' => 3,
        'sequential' => 1,
        'email' => $form_state['input']['submitted']['personal_details']['civicrm_1_contact_1_email_email'],
        'is_primary' => 1,
      );
      $result_email_contact = civicrm_api('Email', 'get', $params_email_contact);
    }
    //I'm aware that there could be multiple contacts with the same e-mailaddress
    //It always selects the last found contact as this is the most recent contact.
    //This is because when for example a new contact is added to the organisation this normally will be the new contact person,
    //while to old contact may have left the organisation, but is still in the system.
    //This way the new contact will always get the e-mail.
    if(is_array($result_email_contact['values'])) {
      foreach($result_email_contact['values'] as $key => $value) {
        $contactId = $value['contact_id'];
        try{
          $params_contact_groups = array(
            'version' => 3,
            'sequential' => 1,
            'contact_id' => $contactId,
          );
          $result_contact_groups = civicrm_api('GroupContact', 'get', $params_contact_groups);
        } catch (CiviCRM_API3_Exception $ex) {
        }
        if(is_array($result_contact_groups)) {
          foreach($result_contact_groups['values'] as $key2 => $value2) {
            if($key2 == 'title' && $value2 == 'Corporate newsletter') {
              //User is already a member
              $isMember = TRUE;
            }
          }
        }
      }
    }
    //If user is not a member of the Corporate newsletter group add it
    if($isMember == FALSE && !empty($contactId) && !empty($params_group_newsletter['id'])) {
      //Add contact to group
      try{
        $params = array(
          'version' => 3,
          'sequential' => 1,
          'contact_id' => $contactId,
          'group_id' => $params_group_newsletter['id'],
        );
        $result_add_contact_to_group = civicrm_api3('GroupContact', 'create', $params);
      } catch (CiviCRM_API3_Exception $ex) {
      }
    }
  }
}

/**
 * Add a redirect back to the profile view when a user has edited his or her own account.
 *
 * See also issue #3272 (http://redmine.pum.nl/issues/3272)
 *
 * @param $form
 * @param $form_state
 */
function pum_portal_custom_profile_submit($form, &$form_state) {
  global $user;
  $form_state['redirect'] = 'user/'.$user->uid;
}

/**
 * Implements hook_menu().
 * Sync settings page
 */
function pum_portal_custom_menu() {
  $items['admin/config/system/pum_sync'] = array(
    'title' => 'Portal sync settings',
    'description' => 'Pum Portal Sync Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_pum_sync_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  $items['admin/config/pum/portal'] = array(
    'title' => 'Portal configuration',
    'description' => 'PUM Portal Configuration Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('pum_portal_settings_form'),
    'access arguments' => array('administer site configuration'),
  );
  return $items;
}

function _pum_sync_settings_form($form, &$form_state) {
 $form['high_school']['tests_taken'] = array(
    '#type' => 'checkboxes',
    '#options' => array("countries" => "countries"),
    '#title' => t('What pum settings need to be synced '),
    '#required' => TRUE,
  );

  $form['force'] = array(
    '#type' => 'checkbox',
    '#title' => t('Force reread.'),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

function _pum_sync_settings_form_submit($form, &$form_state) {
  $msg="";
  $force = $form_state["values"]["force"] == "1"? true: false;
  $msg .= print_r($form_state["values"],true);

  if ( strcmp($form_state["values"]["tests_taken"]["countries"],"countries")===0) {
    $msg .="countries: ".$form_state["values"]["tests_taken"]["countries"];
    _pum_portal_custom_sync_countries(false, $force);
  }
}

function pum_portal_settings_form($form, &$form_state) {
  $form['pum_portal_emergency_button_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Button text for in case of emergency button'),
    '#description' => t('Enter the text that should appear on the in case of emergency button on the portal'),
    '#default_value' => variable_get('pum_portal_custom_button_incaseofemergency_text'),
  );
  $form['pum_portal_emergency_button_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Button url for in case of emergency button'),
    '#description' => t('Enter the URL that the in case of emergency button should link to'),
    '#default_value' => variable_get('pum_portal_custom_button_incaseofemergency_url'),
  );
  $form['pum_portal_custom_environment_active'] = array(
    '#type' => 'checkbox',
    '#title' => t('Use another URL for public website'),
    '#description' => t('This is currently used for the right redirection on logout. ONLY use this if the public website is another website then this one.'),
    '#default_value' => variable_get('pum_portal_custom_environment_active'),
  );
  $form['pum_portal_custom_environment'] = array(
    '#type' => 'textfield',
    '#title' => t('URL of public website'),
    '#description' => t('Enter the URL of the public website with ending /'),
    '#default_value' => variable_get('pum_portal_custom_environment'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );

  return $form;
}

function pum_portal_settings_form_submit($form, &$form_state) {
  variable_set('pum_portal_custom_button_incaseofemergency_text', $form_state['values']['pum_portal_emergency_button_text']);
  variable_set('pum_portal_custom_button_incaseofemergency_url', $form_state['values']['pum_portal_emergency_button_url']);
  variable_set('pum_portal_custom_environment_active', $form_state['values']['pum_portal_custom_environment_active']);
  variable_set('pum_portal_custom_environment', $form_state['values']['pum_portal_custom_environment']);
}

function _pum_portal_custom_sync_countries($cron = false, $force = false) {
  $ret = "";
  civicrm_initialize();

  // get all countries
  $params = Array (
      'version' => 3,
      'sequential' => 1,
      'options' => array('limit' => 1000),
  );
  $result = civicrm_api('Country', 'get', $params);

  //get country flag
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name' => 'civicrm_country_id',
  );
  $resultcustom_field = civicrm_api('CustomField', 'get', $params);

  $country_id_field="custom_".$resultcustom_field["id"];

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'contact_sub_type' => 'country',
    'options' => array('limit' => 1000),
    'return' => $country_id_field,
  );
  $resultcountrycontacts = civicrm_api('Contact', 'get', $params);

  //get country coordinators
  $params = array(
    'version' => 3,
    'sequential' => 1,
    'name_a_b' => 'Country Coordinator is',
  );
  $resultreltype = civicrm_api('RelationshipType', 'get', $params);

  $params = array(
    'version' => 3,
    'sequential' => 1,
    'is_active' => 1,
    'relationship_type_id' => $resultreltype["values"][0]["id"],
    'options' => array('limit' => 10000),
  );
  $resultwithcoordinator = civicrm_api('Relationship', 'get', $params);

  // check with md5 hash
  $md5tot = md5(print_r($result,true).print_r($resultcountrycontacts,true).print_r($resultwithcoordinator,true));

  $md5db = variable_get("pum_md5_country", "");

  if ($md5tot == $md5db && !$force) {
    watchdog("pum", "countries the same");
    if(!$cron) {
      drupal_set_message("countries the same");
    }
  } else {
    watchdog("pum", "countries updated");
    if(!$cron) {
      drupal_set_message("countries updated");
    }

    //if different do loop per country
    $voc = taxonomy_vocabulary_machine_name_load("countries");

    if ($result["is_error"] == "0"){
      foreach($result["values"] as $country){
        $c_id = null;
        $cc_id = null;

        //get country_contact_id
        foreach ($resultcountrycontacts["values"] as $countrycontact){
          if (isset($countrycontact[$country_id_field]) && $countrycontact[$country_id_field] == $country["id"] ) { $c_id = $countrycontact["id"]; break; }
        }

        if ($c_id) {
          //if active coordinator:
          foreach ($resultwithcoordinator["values"] as $countrycoordinator){
            if ($countrycoordinator["contact_id_a"] == $c_id ) { $cc_id = $countrycoordinator["contact_id_b"]; break; }
          }
        }

        if (isset($cc_id)) {
          $terms=taxonomy_get_term_by_name($country["name"],"countries");
          if (count($terms) > 0) {
            $term = array_shift($terms);
          } else {
            $term = new stdClass();
            $term->name = $country["name"];
          }
          $term->vid = $voc->vid;
          $term->field_country_id["und"][0]["value"] = $country["id"];
          taxonomy_term_save($term);
        }
      }
    }
    variable_set("pum_md5_country", $md5tot);
  }
  if (!$cron) {
    return $ret;
  }
}

function pum_portal_custom_cron() {
  _pum_portal_custom_sync_countries(true);
}

/**
 * Implements hook_block_info().
 */
function pum_portal_custom_block_info() {
  $blocks = array();

  $blocks['pum_knowledge_portal'] = array(
    'info' => t('PUMnet Knowledge Portal'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['socialmedia_icons_top'] = array(
    'info' => t('PUM Social Media Icons Top'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['socialmedia_icons_bottom'] = array(
    'info' => t('PUM Social Media Icons Bottom'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['pum_emergency_button'] = array(
    'info' => t('PUM Emergency Button'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function pum_portal_custom_block_view($delta = '') {
  $block = array();
  $social_media_links = '<a class="fb" href="https://www.facebook.com/PUM.nl" target="_blank" title="Join us on Facebook">&nbsp;</a><a class="tw" href="https://twitter.com/pum_nl" target="_blank" title="Follow us on Twitter">&nbsp;</a><a class="li" href="https://www.linkedin.com/company/pum-netherlands-senior-experts" target="_blank" title="Join us on LinkedIn">&nbsp;</a><a class="yt" href="https://www.youtube.com/user/PUMSeniorExperts" target="_blank" title="Watch us on YouTube">&nbsp;</a><a class="in" href="https://www.instagram.com/pum_nl/" target="_blank" title="Follow us on Instagram">&nbsp;</a>';

  switch ($delta) {
    case 'pum_knowledge_portal':
      $block['content'] = '<img src="/sites/all/themes/pum/images/knowledge_portal.png" />';
      break;
    case 'socialmedia_icons_top':
      $block['content'] = '<div class="socialmedia_top">'.$social_media_links.'</div>';
      break;
    case 'socialmedia_icons_bottom':
      $block['content'] = '<div class="socialmedia_bottom">'.$social_media_links.'</div>';
      break;
    case 'pum_emergency_button':
      $pum_emergency_button_text = variable_get('pum_portal_custom_button_incaseofemergency_text');
      if(empty($pum_emergency_button_text)) {
        $pum_emergency_button_text = 'In case of emergency';
      }
      $pum_emergency_button_url = variable_get('pum_portal_custom_button_incaseofemergency_url');
      $block['content'] = '<div class="pum_emergency"><a href="'.$pum_emergency_button_url.'">'.$pum_emergency_button_text.'</a></div>';
      break;
  }
  return $block;
}

/**
* Make sure nodes pum_portal nodes are only viewable by people with the right permissions
*/
function pum_portal_custom_node_grants_alter(&$grants, $account, $op){
  if ($account->uid == 0) {
    $i = 0;
    foreach ($grants as $gid => $grant) {
      if ($gid == "abt_field_pum_private") {
        array_splice($grants, $i, 1);
      }
      $i++;
    }
  }
}

function pum_portal_custom_action_info() {
  return array(
    'pum_portal_custom_add_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Add community to users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
    'pum_portal_custom_delete_taxonomy_item' => array(
      'type' => 'user',
      'label' => t('Delete community from users'),
      'behavior' => array('changes_property'),
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
      'pass rows' => TRUE,
    ),
  );
}

function pum_portal_custom_delete_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) ||
       !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $foundnr = -1;
    $accountchanged = FALSE;
    if ($fieldname && isset($account_edit[$fieldname]["und"])) foreach ($account_edit[$fieldname]["und"] as $nr => $val){
      if ($val["tid"] == $term) {
        $found = TRUE;
        $foundnr = $nr;
      }
    }
    if ($found == TRUE) {
      array_splice($account_edit[$fieldname]["und"],$foundnr,1);
      $accountchanged = TRUE;
    }
    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_add_taxonomy_item(&$user, $context) {
  if (isset($context["view_info"]["arguments"][0])) {
    $term = $context["view_info"]["arguments"][0]?$context["view_info"]["arguments"][0]:-1;
    $oterm = taxonomy_term_load($term);

    $account_edit = array();

    $fieldname = "field_pum_private";
    $account_edit[$fieldname] = $user->field_pum_private;

    if ($oterm->vocabulary_machine_name == "pum_generic") {
      $fieldname="field_pum_generic";
      $account_edit[$fieldname] = $user->field_pum_generic;
    }

    if (!isset($account_edit[$fieldname]) || !isset($account_edit[$fieldname]["und"])) {
      $account_edit[$fieldname]["und"] = array();
    }

    $found = FALSE;
    $accountchanged = FALSE;

    if ($fieldname && isset($account_edit[$fieldname]["und"])) {
      foreach ($account_edit[$fieldname]["und"] as $nr => $val) {
        if ($val["tid"] == $term) {
          $found = TRUE;
        }
      }
    }

    if ($found == FALSE) {
      if (!isset($account_edit[$fieldname]["und"])) {
        $account_edit[$fieldname]["und"] = array();
      }
      $account_edit[$fieldname]["und"][]=array("tid" => $term);
      $accountchanged = TRUE;
    }

    if ($accountchanged == TRUE) {
      user_save($user, $account_edit);
    }
  }
}

function pum_portal_custom_civicrm_update_sector_community($contact_segment_id, $is_main) {
  civicrm_initialize();
  $contact_segment = civicrm_api3('ContactSegment', 'getsingle', array('id' => $contact_segment_id));
  if ($contact_segment['is_main']) {
    SegmentSectorCommunity::subscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  } else {
    SegmentSectorCommunity::unsubscribe($contact_segment['contact_id'], $contact_segment['segment_id']);
  }
}

function pum_portal_custom_civicrm_pre($op, $objectName, $objectId, &$params) {
  SegmentTaxonomy::pre($op, $objectName, $objectId, $params);
}

//*hook_civicrm_post

function pum_portal_custom_civicrm_post($op, $objectName, $objectId, &$objectRef) {
  SegmentTaxonomy::post($op, $objectName, $objectId, $objectRef);
}

function pum_portal_custom_user_presave(&$edit, $account, $category) {
  SegmentSectorCommunity::subscribe_main_sector($account->uid, $edit);
}

function pum_portal_custom_views_query_alter(&$view, &$query) {
  global $user;

  $viewNamesToRestrict = array('latest_portal_blogs', 'pum_portal_latest_forum_topics', 'latest_portal_documents', 'latest_portal_news', 'policies');

  if (!empty($user->uid) && in_array($view->name, $viewNamesToRestrict)) {
    /**
     * Add a where statement to include only forum topics which are not linked
     * to a private a community or which are linked to a private community from
     * which a user has access to.
     */
    $account = user_load($user->uid);
    $user_private_communities = array();
    if (!empty($account->field_pum_private['und'])) {
      foreach ($account->field_pum_private['und'] as $userterm) {
        $user_private_communities[] = $userterm['tid'];
      }
    }

    $vocabulary = taxonomy_vocabulary_machine_name_load('private_group');
    $private_communities = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    $access_communities = array();

    foreach($private_communities as $term) {
      if (in_array($term->tid, $user_private_communities)) {
        if(taxonomy_term_load($term->tid) != FALSE) {
          $access_communities[] = $term->tid;
        }
      }
    }

    $join = new views_join;
    $join->construct('field_data_field_pum_private',
      'node',  // left table
      'nid',   // left field
      'entity_id',   // field,
      array(array(
        'field' => 'entity_type',
        'value' =>'node',
      ),array(
        'field' => 'deleted',
        'value' =>'0',
      )),
      'LEFT'
    );

    $max_key = max( array_keys($query->where));
    $view->query->add_relationship('field_data_field_pum_private',$join,'node');

    $conditions = db_or();
    if(!empty($access_communities)) {
      $conditions->condition('field_data_field_pum_private.field_pum_private_tid', $access_communities, 'IN');
    }
    $conditions->condition('field_data_field_pum_private.field_pum_private_tid', '', 'IS NULL');

    $query->add_where($max_key, $conditions);
  }
}

function pum_portal_custom_node_access($node, $op, $account) {
  if ($op != 'view') {
    return NODE_ACCESS_IGNORE;
  }

  $nodeType = is_string($node)?$node:$node->type;
  $restrictedNodeTypes = array('pum_forum_item', 'pum_portal_document', 'pum_portal_blog', 'pum_portal_news');

  if (user_is_logged_in() && in_array($nodeType, $restrictedNodeTypes)) {
    $user = user_load($account->uid);
    $has_bypass_permission = user_access('bypass node access', $user);

    if($has_bypass_permission == TRUE) {
      return NODE_ACCESS_ALLOW;
    } else {
      if($op == 'view'){
        if (!isset($node->field_pum_private['und'])) {
          $node->field_pum_private['und'] = array();
        }
        foreach ($user->roles as $role_id => $role_name) {
          if($node->node_privacy_byrole['roles'][$role_id]['view'] == 1) {
            if((isset($node->field_pum_private['und']) && is_array($node->field_pum_private['und']) && count($node->field_pum_private['und']) > 0) &&
                (isset($user->field_pum_private['und']) && is_array($user->field_pum_private['und']) && count($user->field_pum_private['und']) > 0)) {

              // Check whether the user has access to the private community.
              foreach($node->field_pum_private['und'] as $term) {
                foreach($user->field_pum_private['und'] as $userterm) {
                  if ($term['tid'] == $userterm['tid']) {
                    return NODE_ACCESS_ALLOW;
                  }
                }
              }

              return NODE_ACCESS_DENY;
            } else if(count($node->field_pum_private['und']) == 0) {
              return NODE_ACCESS_ALLOW;
            } else {
              return NODE_ACCESS_DENY;
            }
          }
        }
      } else {
        return NODE_ACCESS_DENY;
      }
    }
  }

  return NODE_ACCESS_IGNORE;
}

/**
 * Implements hook_token_info()
 *
 * Tokens for CiviCRM Contact Information
 *
 * @example token: [pum_civicrm_contact:first_name]
 *
 * @return array $info - array of tokens
 */
function pum_portal_custom_token_info() {
  $info = array();
  $info['types']['pum_portal_custom'] = array(
    'name' => t('PUM Portal Custom Tokens'),
    'description' => t('Tokens for all kind of stuff.'),
  );
  $info['tokens']['pum_portal_custom']['civicrm-contact-contact_id'] = array('name' => t('CiviCRM Contact ID'), 'description' => t('Contact ID of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-first_name'] = array('name' => t('CiviCRM Contact First name'), 'description' => t('First name of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-middle_name'] = array('name' => t('CiviCRM Contact Middle name'), 'description' => t('Middle name of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-last_name'] = array('name' => t('CiviCRM Contact Last name'), 'description' => t('Last name of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-display_name'] = array('name' => t('CiviCRM Contact Display name'), 'description' => t('Display name of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-job_title'] = array('name' => t('CiviCRM Contact Job Title'), 'description' => t('Job Title of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-birth_date'] = array('name' => t('CiviCRM Contact Birth Date'), 'description' => t('Birth Date of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-street_address'] = array('name' => t('CiviCRM Contact Street Address'), 'description' => t('Street Address of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-postal_code'] = array('name' => t('CiviCRM Contact Postal Code'), 'description' => t('Postal Code of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-country'] = array('name' => t('CiviCRM Contact Country'), 'description' => t('Country Name of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-country_iso_code'] = array('name' => t('CiviCRM Contact Country ISO Code'), 'description' => t('Country ISO Code of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-phone'] = array('name' => t('CiviCRM Contact Phone'), 'description' => t('Phone Number of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-email'] = array('name' => t('CiviCRM Contact E-mail'), 'description' => t('E-mail address of current CiviCRM Contact'));
  $info['tokens']['pum_portal_custom']['civicrm-contact-individual_prefix'] = array('name' => t('CiviCRM Contact Individual Prefix'), 'description' => t('Prefix of current CiviCRM Contact'));

  return $info;
}

/**
 * Implements hook_tokens()
 *
 * Token values for CiviCRM Contact Information
 *
 * @param string $type
 * @param object $tokens
 * @param array $data
 * @param array $options
 *
 * @return array $tokens - array of token values
 */
function pum_portal_custom_tokens($type, $tokens, array $data = array(), array $options = array()) {
  $replacements = array();
  $result_civi_contact = array();
  $result_contact_country = array();
  global $user;
  civicrm_initialize();
  try {
    $params_ufmatch = array(
      'version' => 3,
      'sequential' => 1,
      'uf_id' => $user->uid,
    );
    $result_ufmatch = civicrm_api('UFMatch', 'getsingle', $params_ufmatch);

    $params_civi_contact = array(
      'version' => 3,
      'sequential' => 1,
      'id' => $result_ufmatch['contact_id'],
    );
    $result_civi_contact = civicrm_api('Contact', 'getsingle', $params_civi_contact);

    $params_contact_country = array(
      'version' => 3,
      'sequential' => 1,
      'id' => $result_civi_contact['country_id'],
    );
    $result_contact_country = civicrm_api('Country', 'getsingle', $params_contact_country);
  } catch (Exception $ex){
    $result_ufmatch = NULL;
    $result_civi_contact = NULL;
    $result_contact_country = NULL;
  }

  if(!empty($result_civi_contact['contact_id'])){
    if ($type == 'pum_portal_custom') {
      // set tokens
      foreach ($tokens as $name => $original) {
        switch ($name) {
          case 'civicrm-contact-contact_id':
            $replacements[$original] = $result_civi_contact['contact_id'];
            break;
          case 'civicrm-contact-first_name':
            $replacements[$original] = $result_civi_contact['first_name'];
            break;
          case 'civicrm-contact-middle_name':
            $replacements[$original] = $result_civi_contact['middle_name'];
            break;
          case 'civicrm-contact-last_name':
            $replacements[$original] = $result_civi_contact['last_name'];
            break;
          case 'civicrm-contact-display_name':
            $replacements[$original] = $result_civi_contact['display_name'];
            break;
          case 'civicrm-contact-job_title':
            $replacements[$original] = $result_civi_contact['job_title'];
            break;
          case 'civicrm-contact-birth_date':
            $replacements[$original] = $result_civi_contact['birth_date'];
            break;
          case 'civicrm-contact-street_address':
            $replacements[$original] = $result_civi_contact['street_address'];
            break;
          case 'civicrm-contact-postal_code':
            $replacements[$original] = $result_civi_contact['postal_code'];
            break;
          case 'civicrm-contact-country':
            $replacements[$original] = $result_contact_country['name'];
            break;
          case 'civicrm-contact-country_iso_code':
            $replacements[$original] = $result_contact_country['iso_code'];
            break;
          case 'civicrm-contact-phone':
            $replacements[$original] = $result_civi_contact['phone'];
            break;
          case 'civicrm-contact-email':
            $replacements[$original] = $result_civi_contact['email'];
            break;
          case 'civicrm-contact-individual_prefix':
            $replacements[$original] = !empty($result_civi_contact['individual_prefix'])?$result_civi_contact['individual_prefix']:'Mr./Mrs.';
            break;
        }
      }

      return $replacements;
    }
  }
}